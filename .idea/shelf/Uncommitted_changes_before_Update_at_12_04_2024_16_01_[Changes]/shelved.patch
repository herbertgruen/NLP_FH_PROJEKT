Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision a943ed6728db010d01ca7dd89b8c101e4221552e)
+++ b/.idea/misc.xml	(date 1712859658576)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="NLP_Env" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/NLP.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/NLP.iml b/.idea/NLP.iml
--- a/.idea/NLP.iml	(revision a943ed6728db010d01ca7dd89b8c101e4221552e)
+++ b/.idea/NLP.iml	(date 1712859658563)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="NLP_Env" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: songlyrics_univeral_sentence_encoder-master/Notebooks/SongLyrics_Scraping Notebook.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"# Musixmatch Scraper\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 1,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#requests\\n\",\r\n    \"import requests\\n\",\r\n    \"import urllib\\n\",\r\n    \"import urllib.request\\n\",\r\n    \"from urllib.request import urlopen\\n\",\r\n    \"import urllib.parse\\n\",\r\n    \"import urllib.error\\n\",\r\n    \"from bs4 import BeautifulSoup\\n\",\r\n    \"from datetime import datetime\\n\",\r\n    \"import requests\\n\",\r\n    \"from urllib.request import urlopen, Request\\n\",\r\n    \"\\n\",\r\n    \"#data, strucuture and maths\\n\",\r\n    \"import pandas as pd\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"import math\\n\",\r\n    \"import json\\n\",\r\n    \"import string\\n\",\r\n    \"from  more_itertools import unique_everseen\\n\",\r\n    \"import random\\n\",\r\n    \"\\n\",\r\n    \"#progress,performance and management\\n\",\r\n    \"from tqdm import tqdm_notebook\\n\",\r\n    \"import threading\\n\",\r\n    \"import os\\n\",\r\n    \"import ssl\\n\",\r\n    \"from IPython.display import clear_output\\n\",\r\n    \"import platform\\n\",\r\n    \"import os\\n\",\r\n    \"\\n\",\r\n    \"#time\\n\",\r\n    \"from time import sleep\\n\",\r\n    \"import time\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 2,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"class MusixmatchScraper():\\n\",\r\n    \"    \\n\",\r\n    \"    \\\"\\\"\\\"This class allows you to scrape the lyrics for an artist who has a presence on Musixmatch\\n\",\r\n    \"    \\n\",\r\n    \"    An instance of the class needs to be instantiated with an artist URL e.g.\\n\",\r\n    \"    \\n\",\r\n    \"    https://www.musixmatch.com/artist/Bob-Dylan\\n\",\r\n    \"    \\n\",\r\n    \"    The default number of songs to scrape is 50\\n\",\r\n    \"    \\n\",\r\n    \"    Initiate scrape with self.Run()\\n\",\r\n    \"    \\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"\\n\",\r\n    \"    def __init__(self,artist_url,genre_label):\\n\",\r\n    \"\\n\",\r\n    \"        self.artist_url = artist_url #artists URL as attribute\\n\",\r\n    \"        \\n\",\r\n    \"        self.artist = artist_url.split('artist/')[-1] #artist string as attribute\\n\",\r\n    \"        \\n\",\r\n    \"        self.genre_label = genre_label\\n\",\r\n    \"         \\n\",\r\n    \"        self.song_l = [] #empty list to populate lyrics\\n\",\r\n    \"                        \\n\",\r\n    \"    def _get_html(self,url):\\n\",\r\n    \"        \\n\",\r\n    \"        \\\"\\\"\\\"Uses Beatiful Soup to extract html from a url. Returns a soup object \\\"\\\"\\\"\\n\",\r\n    \"\\n\",\r\n    \"        headers = {'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\\n\",\r\n    \"\\n\",\r\n    \"        req = Request(url, headers=headers)\\n\",\r\n    \"\\n\",\r\n    \"        return BeautifulSoup(urlopen(req).read(), 'html.parser')\\n\",\r\n    \"\\n\",\r\n    \"    def _multithreadCompile(self,thread_count,iteration_list,func):\\n\",\r\n    \"        \\n\",\r\n    \"        \\\"\\\"\\\"a function that compiles an iteration list to prepare\\n\",\r\n    \"        multi threadding\\\"\\\"\\\"\\n\",\r\n    \"\\n\",\r\n    \"        jobs = []\\n\",\r\n    \"\\n\",\r\n    \"        #distribute iteration list to batches and append to jobs list\\n\",\r\n    \"        batches = [i.tolist() for i in np.array_split(iteration_list,thread_count)]\\n\",\r\n    \"\\n\",\r\n    \"        for i in range(len(batches)):\\n\",\r\n    \"\\n\",\r\n    \"            jobs.append(threading.Thread(target=func,args=[batches[i]]))\\n\",\r\n    \"            \\n\",\r\n    \"        return jobs\\n\",\r\n    \"\\n\",\r\n    \"    def _multithreadExecute(self,jobs):\\n\",\r\n    \"        \\n\",\r\n    \"        \\\"\\\"\\\"executes the multi-threadding loop\\\"\\\"\\\"\\n\",\r\n    \"\\n\",\r\n    \"        # Start the threads\\n\",\r\n    \"        for j in jobs:\\n\",\r\n    \"    \\n\",\r\n    \"            j.start()\\n\",\r\n    \"\\n\",\r\n    \"        # Ensure all of the threads have finished\\n\",\r\n    \"        for j in jobs:\\n\",\r\n    \"            j.join()\\n\",\r\n    \"        return\\n\",\r\n    \"    \\n\",\r\n    \"    def _getpageUrls(self,url):\\n\",\r\n    \"        \\n\",\r\n    \"        \\\"\\\"\\\"Gets all the links from an artist page\\\"\\\"\\\"\\n\",\r\n    \"     \\n\",\r\n    \"        html = self._get_html(url) #gets html for current page\\n\",\r\n    \"        \\n\",\r\n    \"        songs = html.find_all('h2',{'class':'media-card-title'}) #element for song\\n\",\r\n    \"        \\n\",\r\n    \"        #loop through and extract urls for all songs in soup object\\n\",\r\n    \"        song_urls = ['https://www.musixmatch.com'+i.find('a')['href'] for i in songs] \\n\",\r\n    \"        \\n\",\r\n    \"        #return list of song urls\\n\",\r\n    \"        return [i for i in song_urls if 'album' not in i]\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"    def _getLyrics(self,song_url):\\n\",\r\n    \"        \\n\",\r\n    \"        \\\"\\\"\\\"Extracts lyrics from a song url. Duplicated lines are removed e.g. chorus lines\\n\",\r\n    \"        Only unique lyrics are returned\\\"\\\"\\\"\\n\",\r\n    \"    \\n\",\r\n    \"        html = self._get_html(song_url) #get html for current page\\n\",\r\n    \"\\n\",\r\n    \"        #find all elements containing lyrics\\n\",\r\n    \"        element = html.find_all('span',{'class':'lyrics__content__ok'})\\n\",\r\n    \"\\n\",\r\n    \"        #numbe of elements to loop through\\n\",\r\n    \"        element_loop = len(element)\\n\",\r\n    \"\\n\",\r\n    \"        song_lyrics = [] #empty list for song lyrics\\n\",\r\n    \"\\n\",\r\n    \"        #extract song lyrics\\n\",\r\n    \"        song_lyrics_raw = [element[i].text.split('\\\\n') for i in range(element_loop)]\\n\",\r\n    \"\\n\",\r\n    \"        #flatten list of lists\\n\",\r\n    \"        song_lyrics_raw = [i for sublist in song_lyrics_raw for i in sublist]\\n\",\r\n    \"\\n\",\r\n    \"        #retain only unique lines in lyrics\\n\",\r\n    \"        song_lyrics.extend(list(dict.fromkeys(song_lyrics_raw)))\\n\",\r\n    \"\\n\",\r\n    \"        #join list and remove empty elements\\n\",\r\n    \"        song_lyrics = ' '.join([i for i in song_lyrics if len(i) >0])\\n\",\r\n    \"\\n\",\r\n    \"        return song_lyrics #return song lyrics\\n\",\r\n    \"    \\n\",\r\n    \"    def _getAllpageUrls(self,target=50):\\n\",\r\n    \"        \\n\",\r\n    \"        \\\"\\\"\\\"Generates page urls for artist. There are 15 songs on each page\\\"\\\"\\\"\\n\",\r\n    \"        \\n\",\r\n    \"        loops = int(target/15) #specifcy how many loops needed\\n\",\r\n    \"        \\n\",\r\n    \"        #generate urls\\n\",\r\n    \"        artist_urls = [self.artist_url+'/'+str(i+1) for i in range(loops)]\\n\",\r\n    \"        \\n\",\r\n    \"        all_song_urls = [] #empty list for all song urls\\n\",\r\n    \"        \\n\",\r\n    \"        for i in artist_urls: #loop through and get all song urls for all pages\\n\",\r\n    \"            \\n\",\r\n    \"            all_song_urls.extend(self._getpageUrls(i))\\n\",\r\n    \"        \\n\",\r\n    \"        return all_song_urls\\n\",\r\n    \"              \\n\",\r\n    \"    def _extractData(self,all_song_urls):\\n\",\r\n    \"        \\n\",\r\n    \"        \\\"\\\"\\\"Extracts data from all song urls\\\"\\\"\\\"\\n\",\r\n    \"    \\n\",\r\n    \"        for i in tqdm_notebook(range(len(all_song_urls))): #loop through all song urls\\n\",\r\n    \"            \\n\",\r\n    \"            try:\\n\",\r\n    \"                #get lyrics\\n\",\r\n    \"                song_lyrics = self._getLyrics(all_song_urls[i])\\n\",\r\n    \"                \\n\",\r\n    \"                #get song title\\n\",\r\n    \"                song_title = all_song_urls[i].split('/')[-1]\\n\",\r\n    \"\\n\",\r\n    \"                #create DataFrame\\n\",\r\n    \"                song_df = pd.DataFrame([(self.artist,song_title,song_lyrics)],columns=['artist','song','lyrics'])\\n\",\r\n    \"                \\n\",\r\n    \"                #append DataFrame to master list\\n\",\r\n    \"                self.song_l.append(song_df)\\n\",\r\n    \"            \\n\",\r\n    \"            except:\\n\",\r\n    \"                pass\\n\",\r\n    \"\\n\",\r\n    \"        return \\n\",\r\n    \"    \\n\",\r\n    \"    def Run(self,target):\\n\",\r\n    \"        \\n\",\r\n    \"        \\\"\\\"\\\"Executes all methods above\\\"\\\"\\\"\\n\",\r\n    \"       \\n\",\r\n    \"        self.all_song_urls = self._getAllpageUrls(target) #get page URL's to get target number of songs\\n\",\r\n    \"\\n\",\r\n    \"        #multi-threaded scraping of all song urls\\n\",\r\n    \"        self._multithreadExecute(self._multithreadCompile(5,self.all_song_urls,self._extractData))\\n\",\r\n    \"\\n\",\r\n    \"        try:\\n\",\r\n    \"            df_final = pd.concat([i for i in self.song_l]) #concatenate all song Df's\\n\",\r\n    \"\\n\",\r\n    \"            df_final.reset_index(drop=True,inplace=True) #reset index\\n\",\r\n    \"            \\n\",\r\n    \"            self.df = df_final[df_final.lyrics.str.len() > 0] #drop any songs with no lyrics or failed scrapes\\n\",\r\n    \"\\n\",\r\n    \"            self.df['genre'] = self.genre_label\\n\",\r\n    \"            \\n\",\r\n    \"            return self.df\\n\",\r\n    \"\\n\",\r\n    \"        except:\\n\",\r\n    \"            pass\\n\",\r\n    \"            return\\n\",\r\n    \"     \"\r\n   ]\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 3\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython3\",\r\n   \"version\": \"3.6.8\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 2\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/songlyrics_univeral_sentence_encoder-master/Notebooks/SongLyrics_Scraping Notebook.ipynb b/songlyrics_univeral_sentence_encoder-master/Notebooks/SongLyrics_Scraping Notebook.ipynb
--- a/songlyrics_univeral_sentence_encoder-master/Notebooks/SongLyrics_Scraping Notebook.ipynb	(revision a943ed6728db010d01ca7dd89b8c101e4221552e)
+++ b/songlyrics_univeral_sentence_encoder-master/Notebooks/SongLyrics_Scraping Notebook.ipynb	(date 1712860986459)
@@ -9,8 +9,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
-   "metadata": {},
+   "execution_count": 3,
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-04-11T18:36:30.771298300Z",
+     "start_time": "2024-04-11T18:36:30.740297600Z"
+    }
+   },
    "outputs": [],
    "source": [
     "#requests\n",
@@ -36,6 +41,7 @@
     "\n",
     "#progress,performance and management\n",
     "from tqdm import tqdm_notebook\n",
+    "import tqdm\n",
     "import threading\n",
     "import os\n",
     "import ssl\n",
@@ -50,184 +56,440 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
-   "metadata": {},
+   "execution_count": 3,
    "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2024-04-11T18:36:34.085789800Z",
+     "start_time": "2024-04-11T18:36:34.061789700Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "BQDbWtYOHSsz_ha5c5Y9myRmgZmLDBiS6ogeOthgWFabc31vRHMMasZEDaGD9RrMpjbs0v9LsY0qfaIsl7w4uvP6SH5r1P6TocCiX6a5b9RIrLzWAOM\n"
+     ]
+    }
+   ],
    "source": [
-    "class MusixmatchScraper():\n",
-    "    \n",
-    "    \"\"\"This class allows you to scrape the lyrics for an artist who has a presence on Musixmatch\n",
+    "import requests\n",
+    "from base64 import b64encode\n",
+    "\n",
+    "def get_access_token(client_id, client_secret):\n",
+    "    auth_url = \"https://accounts.spotify.com/api/token\"\n",
     "    \n",
-    "    An instance of the class needs to be instantiated with an artist URL e.g.\n",
+    "    # Encode the client credentials\n",
+    "    client_creds = f\"{client_id}:{client_secret}\"\n",
+    "    client_creds_b64 = b64encode(client_creds.encode()).decode()\n",
     "    \n",
-    "    https://www.musixmatch.com/artist/Bob-Dylan\n",
+    "    # Make a POST request to the auth_url\n",
+    "    headers = {\n",
+    "        \"Authorization\": f\"Basic {client_creds_b64}\",\n",
+    "        \"Content-Type\": \"application/x-www-form-urlencoded\"\n",
+    "    }\n",
+    "    payload = {\n",
+    "        \"grant_type\": \"client_credentials\"\n",
+    "    }\n",
+    "    response = requests.post(auth_url, headers=headers, data=payload)\n",
     "    \n",
-    "    The default number of songs to scrape is 50\n",
-    "    \n",
-    "    Initiate scrape with self.Run()\n",
-    "    \n",
-    "    \"\"\"\n",
+    "    if response.ok:\n",
+    "        return response.json()['access_token']\n",
+    "    else:\n",
+    "        raise Exception(f\"Could not get token: {response.status_code} {response.text}\")\n",
+    "\n",
+    "client_id = 'b98990456c2640da9ac8ab0032aeaf91'\n",
+    "client_secret = 'c9c77bfdefc240b484af7427ab6a708c'\n",
+    "\n",
+    "access_token = get_access_token(client_id, client_secret)\n",
+    "print(access_token)\n"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2024-04-11T18:36:34.960446300Z",
+     "start_time": "2024-04-11T18:36:34.525961400Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "1 Track ID: 6uIODsxIHybW8ngRUAACb6, Track Name: One Of The Boys\n",
+      "2 Track ID: 1uQDjeqWqHd3LwkYZ2vKvP, Track Name: I Kissed A Girl\n",
+      "3 Track ID: 0WDYdvKkDrwnVuxtNJtLHE, Track Name: Waking Up In Vegas\n",
+      "4 Track ID: 584fagKwwsFMKjxqFi2AOo, Track Name: Thinking Of You\n",
+      "5 Track ID: 3200Oy2pnzyxUjTIwGWCEL, Track Name: Mannequin\n",
+      "6 Track ID: 5CTUG0mPVqyinO2ZHPgn3I, Track Name: Ur So Gay\n",
+      "7 Track ID: 6Qq8K305vIxgvtMWI1fkQG, Track Name: Hot N Cold\n",
+      "8 Track ID: 4WqiQqsqWRqcLPnoxwfPAi, Track Name: If You Can Afford Me\n",
+      "9 Track ID: 3YHr20DraO9onR5iadROdA, Track Name: Lost\n",
+      "10 Track ID: 3jIVingRpdEMBPWX0dr4tY, Track Name: Self Inflicted\n",
+      "11 Track ID: 7wMPIOO8yxtjCp2S9cPpos, Track Name: I'm Still Breathing\n",
+      "12 Track ID: 4iinyMWT3lxJNeqx44apHm, Track Name: Fingerprints\n",
+      "13 Track ID: 4036mSGS7NnpDnn2Cq3c5l, Track Name: A Cup Of Coffee - Remixed / Remastered 2023\n",
+      "14 Track ID: 6mHWixfm40ovj9hWesDU9h, Track Name: I Think I'm Ready - Remixed / Remastered 2023\n",
+      "15 Track ID: 1IIV8jglA0klVZy17q665k, Track Name: Never Really Over\n",
+      "16 Track ID: 7cLrrJ1Dk6WAQyDIj9j26A, Track Name: Cry About It Later\n",
+      "17 Track ID: 3i0uu4DEpcmEAudChpVDBh, Track Name: Teary Eyes\n",
+      "18 Track ID: 367wyLNqQMr5e8S2E6Zvpp, Track Name: Daisies\n",
+      "19 Track ID: 3By64Pmpn0LkwPKSjqSTBp, Track Name: Resilient\n",
+      "20 Track ID: 2F20djOXWDSFEXu3tPdV71, Track Name: Not the End of the World\n",
+      "21 Track ID: 59s3aMqR9uOzLIXAcgBCEm, Track Name: Smile\n",
+      "22 Track ID: 5iKXqTVr88ghRPwMEeVKVM, Track Name: Champagne Problems\n",
+      "23 Track ID: 5ahNnBifspeXOi1sMbiXHT, Track Name: Tucked\n",
+      "24 Track ID: 3B4etxytImrRKQgV3XHjnR, Track Name: Harleys In Hawaii\n",
+      "25 Track ID: 6lWp5O5XH6smTt4vzd4Mgy, Track Name: Only Love\n",
+      "26 Track ID: 2czhdHhprTLjvlIzj56jQt, Track Name: What Makes A Woman\n",
+      "27 Track ID: 6EzuVdWmzgOBmqHpzbbzfQ, Track Name: Witness\n",
+      "28 Track ID: 3tqwKg0W8XfYORNrP4aIhu, Track Name: Hey Hey Hey\n",
+      "29 Track ID: 2rk4s5NBhtHhhJIfjoaWES, Track Name: Roulette\n",
+      "30 Track ID: 3OtMnyUaiipcAT23A8liyi, Track Name: Swish Swish\n",
+      "31 Track ID: 60XMmxciP1qewvkcD16qKQ, Track Name: Déjà Vu\n",
+      "32 Track ID: 6Bat8YJaSEVzWwYFHqgqep, Track Name: Power\n",
+      "33 Track ID: 6W20KhhJcEhRh71l5hQq8C, Track Name: Mind Maze\n",
+      "34 Track ID: 7BZSIG9TyowrVzSdZJpmeI, Track Name: Miss You More\n",
+      "35 Track ID: 7qvxFz3JodM0A7xEM7k3YD, Track Name: Chained To The Rhythm\n",
+      "36 Track ID: 0frWUvNyEqlfy1WAxBAFbb, Track Name: Tsunami\n",
+      "37 Track ID: 4rHmKlFRiFzabiVO6e9w2e, Track Name: Bon Appétit\n",
+      "38 Track ID: 10jcBOZo0OwQVLPxp7bwB6, Track Name: Bigger Than Me\n",
+      "39 Track ID: 732x2Fy6jbt7qC70Zg463q, Track Name: Save As Draft\n",
+      "40 Track ID: 6Pp0cu0y4lOyRd04L3e9lS, Track Name: Pendulum\n",
+      "41 Track ID: 784C7m9r88GPKe2yOAzGYJ, Track Name: Into Me You See\n",
+      "42 Track ID: 5CYXQ9WzVTUbyOYiSKwRFG, Track Name: Dance With The Devil\n",
+      "43 Track ID: 6HtHyWKAzwFwrSnnTunDMl, Track Name: Act My Age\n",
+      "44 Track ID: 6F5c58TMEs1byxUstkzVeM, Track Name: Roar\n",
+      "45 Track ID: 5Uc37Y6FijZcM538PqqkWd, Track Name: Legendary Lovers\n",
+      "46 Track ID: 2xLOMHjkOK8nzxJ4r6yOKR, Track Name: Birthday\n",
+      "47 Track ID: 0RCsGhR44nFVAd5WiZZcGq, Track Name: Walking On Air\n",
+      "48 Track ID: 4fwbGKNExPtPHbor1TBSY4, Track Name: Unconditionally\n",
+      "49 Track ID: 5jrdCoLpJSvHHorevXBATy, Track Name: Dark Horse\n",
+      "50 Track ID: 5vL0yvddknhGj7IrBc6UTj, Track Name: This Is How We Do\n",
+      "51 Track ID: 5OzIe9IL95B23n4rN59JZ3, Track Name: International Smile\n",
+      "52 Track ID: 665T5MrQUl7sSwivPm7pEW, Track Name: Ghost\n",
+      "53 Track ID: 2BSFAQuiYKu4VcMjovRgRQ, Track Name: Love Me\n",
+      "54 Track ID: 0NfwNHAyi4s9HVes4JkaXA, Track Name: This Moment\n",
+      "55 Track ID: 2ve1HouBhfDbqROVQm2IBd, Track Name: Double Rainbow\n",
+      "56 Track ID: 2IRK3qdY6BzbKxKr8eBk8o, Track Name: By The Grace Of God\n",
+      "57 Track ID: 6lOS1dPkjHlAzRCMplJupN, Track Name: Spiritual\n",
+      "58 Track ID: 4MxGfhE3DKxBhdSWTYvc4h, Track Name: It Takes Two\n",
+      "59 Track ID: 3rHUpjfq9JjrfaTsEAmQBC, Track Name: Choose Your Battles\n",
+      "60 Track ID: 27tNWlhdAryQY04Gb2ZhUI, Track Name: Roar\n",
+      "61 Track ID: 0pOZYYEJawmTAPtkzYKSa2, Track Name: Legendary Lovers\n",
+      "62 Track ID: 1NOZvdCovG42qQV7ftVD5d, Track Name: Birthday\n",
+      "63 Track ID: 6eQbRfp5DxLSOL5pGozYf1, Track Name: Walking On Air\n",
+      "64 Track ID: 009ImBOrIUlWgla8U05RAC, Track Name: Unconditionally\n",
+      "65 Track ID: 4jbmgIyjGoXjY01XxatOx6, Track Name: Dark Horse\n",
+      "66 Track ID: 7GCElX2eJA5t0AFWw3WzKn, Track Name: This Is How We Do\n",
+      "67 Track ID: 6q2jvC1htmreAOxJwRtnUD, Track Name: International Smile\n",
+      "68 Track ID: 2Vl6VlxpDQk99QU7TfQGjO, Track Name: Ghost\n",
+      "69 Track ID: 2lrMNui7pK7P7KDWrp86Ru, Track Name: Love Me\n",
+      "70 Track ID: 5Fm0hRkJ9kHQmO3ziYl1Sa, Track Name: This Moment\n",
+      "71 Track ID: 7B8TA3WaoMiKZ3wfnF7PgN, Track Name: Double Rainbow\n",
+      "72 Track ID: 1i0Rv7GtiCnnhpEkNAya80, Track Name: By The Grace Of God\n",
+      "73 Track ID: 55qBw1900pZKfXJ6Q9A2Lc, Track Name: Teenage Dream\n",
+      "74 Track ID: 455AfCsOhhLPRc68sE01D8, Track Name: Last Friday Night (T.G.I.F.)\n",
+      "75 Track ID: 6tS3XVuOyu10897O3ae7bi, Track Name: California Gurls\n",
+      "76 Track ID: 4lCv7b86sLynZbXhfScfm2, Track Name: Firework\n",
+      "77 Track ID: 0rXw5rWZpOdfeeCbMln8MU, Track Name: Peacock\n",
+      "78 Track ID: 7s0YfJE6hNNYq9BV26iCw6, Track Name: Circle The Drain\n",
+      "79 Track ID: 3oL3XRtkP1WVbMxf7dtTdu, Track Name: The One That Got Away\n",
+      "80 Track ID: 4z8ssgZfs5TzKiO8HaGWXO, Track Name: E.T.\n",
+      "81 Track ID: 6WR4l21xoK1pQDhjxg7wg7, Track Name: Who Am I Living For?\n",
+      "82 Track ID: 0SrCokfLVXjRV94KpP3iPm, Track Name: Pearl\n",
+      "83 Track ID: 089keBWJUOsI9wUeVr1uIr, Track Name: Hummingbird Heartbeat\n",
+      "84 Track ID: 1EFNEJyZUsctm6yVzGqLl6, Track Name: Not Like The Movies\n",
+      "85 Track ID: 5jx8tCxiO0uIbo2uNia23K, Track Name: The One That Got Away - Acoustic\n",
+      "86 Track ID: 1nZzRJbFvCEct3uzu04ZoL, Track Name: Part Of Me\n",
+      "87 Track ID: 5JLv62qFIS1DR3zGEcApRt, Track Name: Wide Awake\n",
+      "88 Track ID: 7GsYM767NTEiUFjq00tspw, Track Name: Dressin' Up\n",
+      "89 Track ID: 36ux3YuUsGTWPT8fXclS45, Track Name: E.T.\n",
+      "90 Track ID: 4Smx7N3TVs9McglUSCWEYn, Track Name: Last Friday Night (T.G.I.F.)\n",
+      "91 Track ID: 5Rilw7PyAua7lmQCYPiQKq, Track Name: Tommie Sunshine's Megasix Smash-Up\n",
+      "92 Track ID: 235LXPXfi0SmOaS9TaCh3c, Track Name: Teenage Dream\n",
+      "93 Track ID: 3oHNJECGN3bBoGXejlw2b1, Track Name: Last Friday Night (T.G.I.F.)\n",
+      "94 Track ID: 3f7gYMirBEKuc57218BjOY, Track Name: California Gurls\n",
+      "95 Track ID: 1mXuMM6zjPgjL4asbBsgnt, Track Name: Firework\n",
+      "96 Track ID: 4hJ5VaRy16jJcENIMZT4sl, Track Name: Peacock\n",
+      "97 Track ID: 2t3BqduzpMJVMo5cceBLQY, Track Name: Circle The Drain\n",
+      "98 Track ID: 4uQY80TKE1u4ZQZQKHzVEi, Track Name: The One That Got Away\n",
+      "99 Track ID: 50r1EUDpmSZRPo5aIZpmWi, Track Name: E.T.\n",
+      "100 Track ID: 7IxiJEqnqql7SXFukFvCnO, Track Name: Who Am I Living For?\n",
+      "101 Track ID: 3ztuZHBzHoqv3NeaxnSvxP, Track Name: Pearl\n",
+      "102 Track ID: 73WKf5dSl59yT5mrwDWuuH, Track Name: Hummingbird Heartbeat\n",
+      "103 Track ID: 02Z1u6mX0puSryZFJpqV0G, Track Name: Not Like The Movies\n",
+      "104 Track ID: 0PRqWiyOFMHVee81mr1bp6, Track Name: If We Ever Meet Again\n",
+      "105 Track ID: 1CuzzAbJ4q28V5JOLCzQVp, Track Name: Starstrukk\n",
+      "106 Track ID: 7BAuEd5WLrd4gHKyInRk4B, Track Name: California Gurls - Passion Pit Main Mix\n",
+      "107 Track ID: 38XaC5ruJI06vqa3uKeB0K, Track Name: California Gurls - Armand Van Helden Remix\n",
+      "108 Track ID: 3CVi9Tc6zZgaHnkjvj7obb, Track Name: Teenage Dream - Kaskade Club Remix\n",
+      "109 Track ID: 7IdznjcKCOWhydUH02Istz, Track Name: I Kissed A Girl - Live At MTV Unplugged, 2009\n",
+      "110 Track ID: 68QGxyVl0E9XaI54jO9nzP, Track Name: Ur So Gay - Live At MTV Unplugged, 2009\n",
+      "111 Track ID: 5c9pa7wTZsRU3Mycb0daM6, Track Name: Hackensack - Live At MTV Unplugged, 2009\n",
+      "112 Track ID: 7c9qf9V6PapwNsAHTjzVI9, Track Name: Thinking Of You - Live At MTV Unplugged, 2009\n",
+      "113 Track ID: 73CbwVzYNTEkfLOCC2mkC3, Track Name: Lost - Live At MTV Unplugged, 2009\n",
+      "114 Track ID: 532jcgk0ZQgRze05omDsqo, Track Name: Waking Up In Vegas - Live At MTV Unplugged, 2009\n",
+      "115 Track ID: 6Hup9P0Ggb3ff5tneUdWeM, Track Name: Brick By Brick - Live At MTV Unplugged, 2009\n",
+      "116 Track ID: 5PS8ZVLMFyGklBFZksIQcz, Track Name: One Of The Boys\n",
+      "117 Track ID: 14iN3o8ptQ8cFVZTEmyQRV, Track Name: I Kissed A Girl\n",
+      "118 Track ID: 0CINJz55gaKzuAsqhZ0hEU, Track Name: Waking Up In Vegas\n",
+      "119 Track ID: 59WVntWmghQXfST8TZRUW9, Track Name: Thinking Of You\n",
+      "120 Track ID: 7CP7JttF3DYtRL4Z80k46D, Track Name: Mannequin\n",
+      "121 Track ID: 6Gsc7sbHZLx2kS4QyIzrlK, Track Name: Ur So Gay\n",
+      "122 Track ID: 0iGckQFyv6svOfAbAY9aWJ, Track Name: Hot N Cold\n",
+      "123 Track ID: 0K9eEhOn1SRg0BHdhtaIj3, Track Name: If You Can Afford Me\n",
+      "124 Track ID: 1nwi4hxOs0v8ThgXWQfrf8, Track Name: Lost\n",
+      "125 Track ID: 6llfjLzNRoxYfuFAHUrX0A, Track Name: Self Inflicted\n",
+      "126 Track ID: 3DaNAC9EE3VDWE4eV5gJST, Track Name: I'm Still Breathing\n",
+      "127 Track ID: 1Ik7i87HSzvyFLi6iiJXfh, Track Name: Fingerprints\n",
+      "128 Track ID: 1TOKDNTBEnlhcXzvLinKgd, Track Name: I Kissed A Girl - Rock Remix\n",
+      "129 Track ID: 7EBJeRTwxPT00K35jazm7W, Track Name: Where We Started\n",
+      "130 Track ID: 53y02rkTgMKgaJihn2Y2jE, Track Name: When I'm Gone (with Katy Perry) [VIP Mix]\n",
+      "131 Track ID: 2FARqOyp84KT8emHG5TukP, Track Name: When I'm Gone (with Katy Perry)\n",
+      "132 Track ID: 5902W4uHWzhtOff1UK7the, Track Name: When I’m Gone (with Katy Perry)\n",
+      "133 Track ID: 4yyHCYD1ZmeIXEEbvLjCqh, Track Name: All You Need Is Love\n",
+      "134 Track ID: 63eV5hreY9feQP2CmYavpj, Track Name: Electric - Pokemon 25 Version\n",
+      "135 Track ID: 43WYPxyEfIxlIjNlxQGYzc, Track Name: Cry About It Later (feat. Luísa Sonza & Bruno Martini)\n",
+      "136 Track ID: 2YCi66BWOu8S2OqMp1ulfL, Track Name: Not the End of the World\n",
+      "137 Track ID: 6ppt4IaZ99VglKYgBOPzve, Track Name: E.T.\n",
+      "138 Track ID: 7pKF99ljxBi78x8uK2GOdK, Track Name: This Moment\n",
+      "139 Track ID: 30jckq2sFf8E1yM6q64oys, Track Name: By The Grace Of God\n",
+      "140 Track ID: 02Mc4ocohVQ5ze8w1itn7s, Track Name: Bigger Than Me\n",
+      "141 Track ID: 4DCFe4ZsltfBW98VrLmjW8, Track Name: Wide Awake\n",
+      "142 Track ID: 4abn7Lc3illnEHFc9ki6x2, Track Name: Resilient (ft. Aitana) [Tiësto Remix]\n",
+      "143 Track ID: 01Do7wJpYOwHHbmj19vnVI, Track Name: Resilient\n",
+      "144 Track ID: 6LChPeIMte68qTHRX4PnGY, Track Name: Roar\n",
+      "145 Track ID: 2bJURVFGWqB7ROPCLNo3mp, Track Name: Firework\n",
+      "146 Track ID: 3nkqllPjCjO7fZaAB4W64W, Track Name: Fingerprints\n",
+      "147 Track ID: 3Z46AaeKFQNcQtDDnhyQfe, Track Name: Power\n",
+      "148 Track ID: 6Hi8zihdVk8r7XarEL0oYv, Track Name: What Makes A Woman\n",
+      "149 Track ID: 0gyFOBM8BrLromC6VtdThk, Track Name: Cry About It Later\n",
+      "150 Track ID: 34BOIMHbTojsTHbBuMaLfK, Track Name: E.T.\n",
+      "151 Track ID: 6kYWEELtjf3eM0fI6zqfcp, Track Name: Dark Horse\n",
+      "152 Track ID: 4GMhDuUNawEOqHCSvVrLpj, Track Name: Ghost\n",
+      "153 Track ID: 38yE3wLUCkn8SkxPvXv8EQ, Track Name: Spiritual\n",
+      "154 Track ID: 16xsl6dV9D179YpSsIL3ny, Track Name: Dance With The Devil\n",
+      "155 Track ID: 1Uo2pkayxN1QGZK94lBSHF, Track Name: Tucked\n",
+      "156 Track ID: 28h4wrZ1zUo9osXVPtV0EG, Track Name: Peacock\n",
+      "157 Track ID: 3S6NRRUXxMSWYm9Dnwv1Eh, Track Name: California Gurls\n",
+      "158 Track ID: 0mlADdMSJvSnPhy43TRIrL, Track Name: Swish Swish\n",
+      "159 Track ID: 2u9EEBRhsSl6NuVZ83STyr, Track Name: Walking On Air\n",
+      "160 Track ID: 22s05QXNsKSGobR43cacS9, Track Name: Waking Up In Vegas\n"
+     ]
+    }
+   ],
+   "source": [
+    "import requests\n",
     "\n",
-    "    def __init__(self,artist_url,genre_label):\n",
+    "# Function to get all albums for a given artist\n",
+    "def get_artist_albums(artist_id, access_token):\n",
+    "    albums = []\n",
+    "    url = f\"https://api.spotify.com/v1/artists/{artist_id}/albums\"\n",
+    "    headers = {\n",
+    "        \"Authorization\": f\"Bearer {access_token}\",\n",
+    "        \"Content-Type\": \"application/json\"\n",
+    "    }\n",
+    "    response = requests.get(url, headers=headers)\n",
+    "    if response.ok:\n",
+    "        albums = response.json()['items']\n",
+    "    return albums\n",
     "\n",
-    "        self.artist_url = artist_url #artists URL as attribute\n",
-    "        \n",
-    "        self.artist = artist_url.split('artist/')[-1] #artist string as attribute\n",
-    "        \n",
-    "        self.genre_label = genre_label\n",
-    "         \n",
-    "        self.song_l = [] #empty list to populate lyrics\n",
-    "                        \n",
-    "    def _get_html(self,url):\n",
-    "        \n",
-    "        \"\"\"Uses Beatiful Soup to extract html from a url. Returns a soup object \"\"\"\n",
-    "\n",
-    "        headers = {'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\n",
-    "\n",
-    "        req = Request(url, headers=headers)\n",
-    "\n",
-    "        return BeautifulSoup(urlopen(req).read(), 'html.parser')\n",
-    "\n",
-    "    def _multithreadCompile(self,thread_count,iteration_list,func):\n",
-    "        \n",
-    "        \"\"\"a function that compiles an iteration list to prepare\n",
-    "        multi threadding\"\"\"\n",
-    "\n",
-    "        jobs = []\n",
-    "\n",
-    "        #distribute iteration list to batches and append to jobs list\n",
-    "        batches = [i.tolist() for i in np.array_split(iteration_list,thread_count)]\n",
-    "\n",
-    "        for i in range(len(batches)):\n",
-    "\n",
-    "            jobs.append(threading.Thread(target=func,args=[batches[i]]))\n",
-    "            \n",
-    "        return jobs\n",
+    "# Function to get all tracks from an album\n",
+    "def get_album_tracks(album_id, access_token):\n",
+    "    tracks = []\n",
+    "    url = f\"https://api.spotify.com/v1/albums/{album_id}/tracks\"\n",
+    "    headers = {\n",
+    "        \"Authorization\": f\"Bearer {access_token}\",\n",
+    "        \"Content-Type\": \"application/json\"\n",
+    "    }\n",
+    "    response = requests.get(url, headers=headers)\n",
+    "    if response.ok:\n",
+    "        tracks = response.json()['items']\n",
+    "    return tracks\n",
+    "\n",
+    "# Replace these with your actual access token and artist ID\n",
+    "artist_id = '6jJ0s89eD6GaHleKKya26X'\n",
+    "\n",
+    "# Get all albums for the artist\n",
+    "albums = get_artist_albums(artist_id, access_token)\n",
+    "\n",
+    "# For each album, get all tracks\n",
+    "all_track_ids = []\n",
+    "for album in albums:\n",
+    "    tracks = get_album_tracks(album['id'], access_token)\n",
+    "    for track in tracks:\n",
+    "        all_track_ids.append((track['id'], track['name']))\n",
+    "\n",
+    "i = 0\n",
+    "# Print all track IDs and names\n",
+    "for track_id, track_name in all_track_ids:\n",
+    "    i = i+1\n",
+    "    print(f\"{i} Track ID: {track_id}, Track Name: {track_name}\")\n"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2024-04-11T18:36:43.020725800Z",
+     "start_time": "2024-04-11T18:36:34.962447800Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Paroles de la chanson Hello par Adele\r\n",
+      "Hello, it's me\n",
+      "I was wondering if after all these years you'd like to meet\n",
+      "To go over everything\n",
+      "They say that time's supposed to heal ya, but I ain't done much healing\n",
+      "Hello, can you hear me?\n",
+      "I'm in California dreaming about who we used to be\n",
+      "When we were younger and free\n",
+      "I've forgotten how it felt before the world fell at our feet\n",
+      "\n",
+      "There's such a difference between us\n",
+      "And a million miles\n",
+      "\n",
+      "\n",
+      "Hello from the other side\n",
+      "I must've called a thousand times\n",
+      "To tell you I'm sorry for everything that I've done\n",
+      "But when I call, you never seem to be home\n",
+      "Hello from the outside\n",
+      "At least, I can say that I've tried\n",
+      "To tell you I'm sorry for breaking your heart\n",
+      "But it don't matter, it clearly doesn't tear you apart anymore\n",
+      "\n",
+      "Hello, how are you?\n",
+      "It's so typical of me to talk about myself, I'm sorry\n",
+      "I hope that you're well\n",
+      "Did you ever make it out of that town where nothing ever happened?\n",
+      "\n",
+      "\n",
+      "It's no secret that the both of us\n",
+      "Are running out of time\n",
+      "\n",
+      "So hello from the other side\n",
+      "I must've called a thousand times\n",
+      "To tell you I'm sorry for everything that I've done\n",
+      "But when I call, you never seem to be home\n",
+      "Hello from the outside\n",
+      "At least, I can say that I've tried\n",
+      "To tell you I'm sorry for breaking your heart\n",
+      "But it don't matter, it clearly doesn't tear you apart anymore\n",
+      "\n",
+      "(Highs, highs, highs, highs, lows, lows, lows, lows)\n",
+      "Ooh, anymore\n",
+      "(Highs, highs, highs, highs, lows, lows, lows, lows)\n",
+      "\n",
+      "Ooh, anymore\n",
+      "(Highs, highs, highs, highs, lows, lows, lows, lows)\n",
+      "Ooh, anymore\n",
+      "(Highs, highs, highs, highs, lows, lows, lows, lows)\n",
+      "Anymore\n",
+      "\n",
+      "Hello from the other side\n",
+      "I must've called a thousand times\n",
+      "To tell you I'm sorry for everything that I've done\n",
+      "But when I call, you never seem to be home\n",
+      "Hello from the outside\n",
+      "At least, I can say that I've tried\n",
+      "To tell you I'm sorry for breaking your heart\n",
+      "But it don't matter, it clearly doesn't tear you apart anymore\n"
+     ]
+    }
+   ],
+   "source": [
+    "import requests\n",
+    "\n",
+    "def get_lyrics(artist, song):\n",
+    "    base_url = \"https://api.lyrics.ovh/v1/\"\n",
+    "    full_url = f\"{base_url}{artist}/{song}\"\n",
+    "    response = requests.get(full_url)\n",
+    "    if response.status_code == 200:\n",
+    "        data = response.json()\n",
+    "        return data.get(\"lyrics\", \"Lyrics not found.\")\n",
+    "    else:\n",
+    "        return \"Failed to fetch lyrics.\"\n",
     "\n",
-    "    def _multithreadExecute(self,jobs):\n",
-    "        \n",
-    "        \"\"\"executes the multi-threadding loop\"\"\"\n",
-    "\n",
-    "        # Start the threads\n",
-    "        for j in jobs:\n",
-    "    \n",
-    "            j.start()\n",
-    "\n",
-    "        # Ensure all of the threads have finished\n",
-    "        for j in jobs:\n",
-    "            j.join()\n",
-    "        return\n",
-    "    \n",
-    "    def _getpageUrls(self,url):\n",
-    "        \n",
-    "        \"\"\"Gets all the links from an artist page\"\"\"\n",
-    "     \n",
-    "        html = self._get_html(url) #gets html for current page\n",
-    "        \n",
-    "        songs = html.find_all('h2',{'class':'media-card-title'}) #element for song\n",
-    "        \n",
-    "        #loop through and extract urls for all songs in soup object\n",
-    "        song_urls = ['https://www.musixmatch.com'+i.find('a')['href'] for i in songs] \n",
-    "        \n",
-    "        #return list of song urls\n",
-    "        return [i for i in song_urls if 'album' not in i]\n",
-    "\n",
-    "\n",
-    "    def _getLyrics(self,song_url):\n",
-    "        \n",
-    "        \"\"\"Extracts lyrics from a song url. Duplicated lines are removed e.g. chorus lines\n",
-    "        Only unique lyrics are returned\"\"\"\n",
-    "    \n",
-    "        html = self._get_html(song_url) #get html for current page\n",
-    "\n",
-    "        #find all elements containing lyrics\n",
-    "        element = html.find_all('span',{'class':'lyrics__content__ok'})\n",
-    "\n",
-    "        #numbe of elements to loop through\n",
-    "        element_loop = len(element)\n",
-    "\n",
-    "        song_lyrics = [] #empty list for song lyrics\n",
-    "\n",
-    "        #extract song lyrics\n",
-    "        song_lyrics_raw = [element[i].text.split('\\n') for i in range(element_loop)]\n",
-    "\n",
-    "        #flatten list of lists\n",
-    "        song_lyrics_raw = [i for sublist in song_lyrics_raw for i in sublist]\n",
-    "\n",
-    "        #retain only unique lines in lyrics\n",
-    "        song_lyrics.extend(list(dict.fromkeys(song_lyrics_raw)))\n",
-    "\n",
-    "        #join list and remove empty elements\n",
-    "        song_lyrics = ' '.join([i for i in song_lyrics if len(i) >0])\n",
-    "\n",
-    "        return song_lyrics #return song lyrics\n",
-    "    \n",
-    "    def _getAllpageUrls(self,target=50):\n",
-    "        \n",
-    "        \"\"\"Generates page urls for artist. There are 15 songs on each page\"\"\"\n",
-    "        \n",
-    "        loops = int(target/15) #specifcy how many loops needed\n",
-    "        \n",
-    "        #generate urls\n",
-    "        artist_urls = [self.artist_url+'/'+str(i+1) for i in range(loops)]\n",
-    "        \n",
-    "        all_song_urls = [] #empty list for all song urls\n",
-    "        \n",
-    "        for i in artist_urls: #loop through and get all song urls for all pages\n",
-    "            \n",
-    "            all_song_urls.extend(self._getpageUrls(i))\n",
-    "        \n",
-    "        return all_song_urls\n",
-    "              \n",
-    "    def _extractData(self,all_song_urls):\n",
-    "        \n",
-    "        \"\"\"Extracts data from all song urls\"\"\"\n",
-    "    \n",
-    "        for i in tqdm_notebook(range(len(all_song_urls))): #loop through all song urls\n",
-    "            \n",
-    "            try:\n",
-    "                #get lyrics\n",
-    "                song_lyrics = self._getLyrics(all_song_urls[i])\n",
-    "                \n",
-    "                #get song title\n",
-    "                song_title = all_song_urls[i].split('/')[-1]\n",
-    "\n",
-    "                #create DataFrame\n",
-    "                song_df = pd.DataFrame([(self.artist,song_title,song_lyrics)],columns=['artist','song','lyrics'])\n",
-    "                \n",
-    "                #append DataFrame to master list\n",
-    "                self.song_l.append(song_df)\n",
-    "            \n",
-    "            except:\n",
-    "                pass\n",
-    "\n",
-    "        return \n",
-    "    \n",
-    "    def Run(self,target):\n",
-    "        \n",
-    "        \"\"\"Executes all methods above\"\"\"\n",
-    "       \n",
-    "        self.all_song_urls = self._getAllpageUrls(target) #get page URL's to get target number of songs\n",
-    "\n",
-    "        #multi-threaded scraping of all song urls\n",
-    "        self._multithreadExecute(self._multithreadCompile(5,self.all_song_urls,self._extractData))\n",
-    "\n",
-    "        try:\n",
-    "            df_final = pd.concat([i for i in self.song_l]) #concatenate all song Df's\n",
-    "\n",
-    "            df_final.reset_index(drop=True,inplace=True) #reset index\n",
-    "            \n",
-    "            self.df = df_final[df_final.lyrics.str.len() > 0] #drop any songs with no lyrics or failed scrapes\n",
-    "\n",
-    "            self.df['genre'] = self.genre_label\n",
-    "            \n",
-    "            return self.df\n",
-    "\n",
-    "        except:\n",
-    "            pass\n",
-    "            return\n",
-    "     "
-   ]
+    "# Example usage\n",
+    "artist_name = \"Adele\"\n",
+    "song_title = \"Hello\"\n",
+    "lyrics = get_lyrics(artist_name, song_title)\n",
+    "print(lyrics)"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2024-04-11T18:36:43.628488500Z",
+     "start_time": "2024-04-11T18:36:43.024862400Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2024-04-11T18:36:43.674476Z",
+     "start_time": "2024-04-11T18:36:43.630488800Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2024-04-11T18:36:43.676476700Z",
+     "start_time": "2024-04-11T18:36:43.646486900Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2024-04-11T18:36:43.678477300Z",
+     "start_time": "2024-04-11T18:36:43.662508600Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false
+   }
   }
  ],
  "metadata": {
Index: songlyrics_univeral_sentence_encoder-master/Notebooks/SongLyrics_Analysis Notebook.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/songlyrics_univeral_sentence_encoder-master/Notebooks/SongLyrics_Analysis Notebook.ipynb b/songlyrics_univeral_sentence_encoder-master/Notebooks/SongLyrics_Analysis Notebook.ipynb
--- a/songlyrics_univeral_sentence_encoder-master/Notebooks/SongLyrics_Analysis Notebook.ipynb	(revision a943ed6728db010d01ca7dd89b8c101e4221552e)
+++ b/songlyrics_univeral_sentence_encoder-master/Notebooks/SongLyrics_Analysis Notebook.ipynb	(date 1710699593532)
@@ -73,7 +73,7 @@
     "import tensorflow as tf\n",
     "import tensorflow_hub as hub\n",
     "\n",
-    "#sklearn\n",
+    "#sklearnxx^^\n",
     "from sklearn.feature_extraction.text import CountVectorizer\n",
     "from sklearn.metrics.pairwise import cosine_similarity\n",
     "from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS \n",
@@ -72479,7 +72479,7 @@
           -0.1053581159605467,
           -0.27029399774997415,
           -0.24613378395682683,
-          2.9927089926373544e-05,
+          2.9927089926373544E-5,
           -0.1219051015460131,
           0.08383166239840842,
           -0.14397002729407377,
@@ -72538,7 +72538,7 @@
           -0.318496128332762,
           -0.2551459202015556,
           0.16694089136531443,
-          -0.00047087308540907187,
+          -4.7087308540907187E-4,
           0.11381360625044536,
           -0.17773348822910418,
           -0.2865046111093452,
@@ -72753,9 +72753,9 @@
           -0.049402601062606986,
           -0.19127311998508312,
           -0.049402601062606986,
-          0.00023658714509266696,
+          2.3658714509266696E-4,
           -0.06914392684658052,
-          0.00023658714509266696,
+          2.3658714509266696E-4,
           -0.06914392684658052,
           0.06320167844149345,
           -0.2820449734907533,
@@ -73251,7 +73251,7 @@
           -0.01847863723638821,
           -0.047208019314862903,
           -0.07522854696048134,
-          0.00038370469296745025,
+          3.8370469296745025E-4,
           -0.08504669658632164,
           -0.18717798634448368,
           -0.04043618915223986,
@@ -73356,7 +73356,7 @@
           -0.0839199544660142,
           -0.1653527463485437,
           0.1308102981047181,
-          -0.0008061634076700283,
+          -8.061634076700283E-4,
           0.08877127263315461,
           -0.00919178801185822,
           0.2833605857024971,
@@ -75593,7 +75593,7 @@
           0.03116351126042271,
           -0.1166033928119618,
           0.15913721404756614,
-          0.00030125769364338284,
+          3.0125769364338284E-4,
           0.15442582596215937,
           -0.037882784129875564,
           0.09166893724374829,
@@ -75763,7 +75763,7 @@
           0.07529750505992437,
           0.14207328263001268,
           0.15508059060583212,
-          -0.0009068157585546133,
+          -9.068157585546133E-4,
           0.07100295337756911,
           0.13259108131498512,
           0.1252109796475627,
@@ -75871,7 +75871,7 @@
           0.1923395391474147,
           0.23747366719748003,
           -0.03681993122014593,
-          -8.941378906970887e-05,
+          -8.941378906970887E-5,
           0.13451947766801967,
           0.07020349357703656,
           0.3124197896281545,
@@ -76001,7 +76001,7 @@
           0.1740284466456765,
           0.026397321800932894,
           -0.11508283737281608,
-          7.544271294570443e-05,
+          7.544271294570443E-5,
           0.17476141094328035,
           0.06154243139498496,
           0.08641429285486879,
@@ -77264,7 +77264,7 @@
           -0.15609809068645664,
           -0.2078897115395117,
           -0.27327271675690035,
-          -0.0005102456685251453,
+          -5.102456685251453E-4,
           0.036461941867579215,
           -0.19915538132750532,
           -0.2307812567978354,
@@ -77664,7 +77664,7 @@
           0.36385245348761963,
           0.09384123704516129,
           -0.17547585922693262,
-          -0.0008738998726182919,
+          -8.738998726182919E-4,
           0.00554560314432715,
           -0.023700797106561138,
           -0.0071150767396539975,
@@ -77689,7 +77689,7 @@
           -0.17782745434293695,
           -0.11105259720832222,
           0.020294801860609744,
-          7.835587144853703e-05,
+          7.835587144853703E-5,
           -0.062409519702976875,
           0.03579854504418492,
           -0.04835689191027703,
@@ -78971,7 +78971,7 @@
           -0.009898985909924326,
           0.022671469515975193,
           0.03262127272523429,
-          -0.0009068157585546133,
+          -9.068157585546133E-4,
           0.07100295337756911,
           -0.1742109893004753,
           -0.13260479625645188,
@@ -79099,7 +79099,7 @@
           -0.007549817110009736,
           -0.13936955342219448,
           -0.06104205391530708,
-          0.0007851294688025479,
+          7.851294688025479E-4,
           -0.1378773421456708,
           -0.1788442556246888,
           -0.1788442556246888,
@@ -80281,7 +80281,7 @@
           -0.13735066609004226,
           0.006338461651593668,
           0.0021385547746208128,
-          -0.0005369389181159193,
+          -5.369389181159193E-4,
           -0.2991802916388068,
           -0.08439718871169391,
           0.2076638472376453,
@@ -81692,7 +81692,7 @@
           -0.2868965928277828,
           0.11594774895329324,
           -0.15654041823494314,
-          -4.407211347443214e-05,
+          -4.407211347443214E-5,
           -0.11419191765850734,
           -0.03821351149186599,
           0.044767751174626724,
@@ -83045,10 +83045,10 @@
           0.06643365805579067,
           0.1721832583521385,
           0.07712789287126826,
-          -0.0008417780890693418,
+          -8.417780890693418E-4,
           0.05640985522612875,
           0.1934126854695423,
-          4.7469130282581234e-05,
+          4.7469130282581234E-5,
           0.2418737874014797,
           -0.2730659412721685,
           -0.1118281517514351,
@@ -83075,7 +83075,7 @@
           -0.10363718396834488,
           0.011104091735072902,
           -0.04705458935472567,
-          -2.698285812852098e-05,
+          -2.698285812852098E-5,
           -0.2134558556081343,
           -0.03125109910027716,
           -0.06341890323872568,
@@ -83086,7 +83086,7 @@
           -0.08608714392557543,
           -0.07495710561354377,
           -0.3084226047588109,
-          0.0008507152197460947,
+          8.507152197460947E-4,
           -0.14027690158547257,
           -0.11326451728252605,
           -0.2632339102542419,
@@ -83108,7 +83108,7 @@
           0.07772416528420739,
           0.08332930708330728,
           -0.1739063505791298,
-          0.0006537260593422085,
+          6.537260593422085E-4,
           -0.1311015703318873,
           -0.11490556302752394,
           0.3211377799636007,
@@ -83236,11 +83236,11 @@
           0.06783718628113666,
           0.3341242673773708,
           0.1628668370895482,
-          -0.0005661173580107336,
+          -5.661173580107336E-4,
           0.09781564535390003,
           -0.026112612253811285,
           -0.20640744705830083,
-          -5.994846295673869e-05,
+          -5.994846295673869E-5,
           0.19816071840874477,
           -0.1450573065440009,
           -0.13606961369350118,
@@ -83322,7 +83322,7 @@
           -0.07727378517067968,
           -0.1053585488242574,
           -0.13679420721834773,
-          0.0003449381467380379,
+          3.449381467380379E-4,
           -0.19162659658724823,
           -0.0534291132387898,
           -0.0034580429625320048,
@@ -83444,7 +83444,7 @@
           0.09176479367343239,
           -0.024430232641000207,
           -0.10402605814133573,
-          0.0008792515329250428,
+          8.792515329250428E-4,
           0.0032472964454638726,
           0.23572991289556605,
           0.07202341368781971,
@@ -83491,7 +83491,7 @@
           -0.05633708664974823,
           0.08189398782497795,
           -0.05549593922588261,
-          0.0005960616736440626,
+          5.960616736440626E-4,
           -0.08162484447378714,
           -0.055834796411099466,
           -0.16150836767848692,
@@ -84564,7 +84564,7 @@
           -0.0436077291884022,
           0.026250390542562726,
           -0.058445686874993394,
-          0.0006900511084498963,
+          6.900511084498963E-4,
           -0.06403612724258467,
           0.001827294844914184,
           -0.06443917987793499,
@@ -84683,7 +84683,7 @@
           0.01878063795479787,
           -0.14113626538465276,
           -0.024461300468200657,
-          -0.00035281891028538133,
+          -3.5281891028538133E-4,
           0.07645364131765545,
           0.06706425313255485,
           0.10656888419893087,
@@ -84752,7 +84752,7 @@
           -0.27143216385352453,
           -0.11330819892733826,
           -0.14151195055948593,
-          0.000315514778752031,
+          3.15514778752031E-4,
           -0.022126680845313634,
           -0.06368967010068757,
           -0.005087058955228359,
@@ -87259,7 +87259,7 @@
           -0.10535808230276124,
           -0.27029400909198475,
           -0.2461337874616753,
-          2.9960612513893654e-05,
+          2.9960612513893654E-5,
           -0.12190515092164528,
           0.08383161285031436,
           -0.1439699465988339,
@@ -87318,7 +87318,7 @@
           -0.31849613699602897,
           -0.25514601901668454,
           0.16694088371968438,
-          -0.00047092800716504266,
+          -4.7092800716504266E-4,
           0.11381346854354625,
           -0.17773355742304198,
           -0.28650462220027384,
@@ -87533,9 +87533,9 @@
           -0.04940252299143415,
           -0.19127319497055942,
           -0.04940252299143415,
-          0.00023653647950929585,
+          2.3653647950929585E-4,
           -0.06914393790235245,
-          0.00023653647950929585,
+          2.3653647950929585E-4,
           -0.06914393790235245,
           0.06320164000594346,
           -0.28204498642746023,
@@ -88031,7 +88031,7 @@
           -0.018484960398791928,
           -0.047209501370139476,
           -0.07523077554566536,
-          0.0003836971917332375,
+          3.836971917332375E-4,
           -0.08504626008906635,
           -0.18717654593999472,
           -0.04044031786511777,
@@ -88136,7 +88136,7 @@
           -0.08391908436904677,
           -0.16535137442213288,
           0.13081163054516626,
-          -0.0008062743895615038,
+          -8.062743895615038E-4,
           0.08877150770261034,
           -0.00918886503730382,
           0.28336039263844937,
@@ -88499,7 +88499,7 @@
           0.15419504670120782,
           0.16140633359573642,
           0.14834649733578448,
-          -0.00045063360164569397,
+          -4.5063360164569397E-4,
           -0.16756218918169954,
           0.23995557282701707,
           -0.04151035442205532,
@@ -90073,7 +90073,7 @@
           -0.2075931771088237,
           -0.24425751951117747,
           -0.07266611154842484,
-          -0.0005172773235422152,
+          -5.172773235422152E-4,
           -0.15475047961295466,
           -0.13060946214181965,
           -0.20653715045176443,
@@ -90085,7 +90085,7 @@
           -0.2370540724074115,
           -0.2295286779017104,
           -0.03917467074926936,
-          0.0007058887642264425,
+          7.058887642264425E-4,
           -0.25837170230503026,
           -0.08925063167379257,
           0.15704356921340618,
@@ -90237,7 +90237,7 @@
           0.26715858849046614,
           0.14231645191004566,
           0.02167965376583388,
-          -0.00014802665349537315,
+          -1.4802665349537315E-4,
           -0.05473988988683539,
           -0.11975303875607987,
           0.2427178009329788,
@@ -91230,7 +91230,7 @@
           0.03116353223987412,
           -0.11660331764887416,
           0.15913718882306757,
-          0.00030130179410656644,
+          3.0130179410656644E-4,
           0.15442577645934774,
           -0.037882769535483835,
           0.09166895105348224,
@@ -91400,7 +91400,7 @@
           0.07529209649969927,
           0.14207028281793696,
           0.15507980223005385,
-          -0.0009101040232390514,
+          -9.101040232390514E-4,
           0.07099703738763422,
           0.13258616277427054,
           0.12521153443093552,
@@ -91508,7 +91508,7 @@
           0.19233814275798944,
           0.23746775252696622,
           -0.03682002658985084,
-          -8.939160304117719e-05,
+          -8.939160304117719E-5,
           0.13451671288435518,
           0.07019997135531189,
           0.3124160440069026,
@@ -91638,7 +91638,7 @@
           0.17403063933797494,
           0.026394344079385894,
           -0.11508339538510245,
-          7.793140823559447e-05,
+          7.793140823559447E-5,
           0.1747638495411277,
           0.061541651235778455,
           0.08641134107558718,
@@ -91836,7 +91836,7 @@
           0.07306979229014655,
           0.17874139186781487,
           0.342606974158593,
-          -0.00028659238628846645,
+          -2.8659238628846645E-4,
           0.28618111415856884,
           -0.03283011503562873,
           -0.003246131940987905,
@@ -91915,7 +91915,7 @@
           0.3458300829016073,
           0.22976988746300234,
           0.2744077863464708,
-          0.0003665947390283225,
+          3.665947390283225E-4,
           -0.15990255272193674,
           0.26509300910065126,
           0.07387723447938338,
@@ -91999,7 +91999,7 @@
           0.31358783793801476,
           0.27313007508040943,
           0.20120910477037998,
-          0.0006620586993963624,
+          6.620586993963624E-4,
           0.32489490202763005,
           0.11301931857801174,
           -0.017222716543354284,
@@ -92107,7 +92107,7 @@
           0.30779770067932966,
           0.1220949231068108,
           0.06268670182305314,
-          0.000709898903582566,
+          7.09898903582566E-4,
           0.12791712750639617,
           0.0065812959245576345,
           0.07222144695620328,
@@ -93262,7 +93262,7 @@
           -0.15609810672832755,
           -0.20788978084095386,
           -0.2732727512313227,
-          -0.0005103089643413161,
+          -5.103089643413161E-4,
           0.036461883350336344,
           -0.19915539773037785,
           -0.23078133552002217,
@@ -93662,7 +93662,7 @@
           0.36385471591509205,
           0.09384424331269517,
           -0.17547398733962877,
-          -0.0008748775144018304,
+          -8.748775144018304E-4,
           0.005549185442956347,
           -0.023700603164330508,
           -0.007110592562799337,
@@ -93687,7 +93687,7 @@
           -0.17782757553005357,
           -0.11105183935519655,
           0.02029720749520163,
-          8.330536501858707e-05,
+          8.330536501858707E-5,
           -0.06240943185926264,
           0.03579808835065641,
           -0.04835724872717361,
@@ -93823,7 +93823,7 @@
           -0.10039888821120337,
           -0.2994038530502059,
           -0.12765173162011628,
-          0.0009570445183843153,
+          9.570445183843153E-4,
           0.009382361528853356,
           -0.10328414290882872,
           -0.10418119280569348,
@@ -94011,7 +94011,7 @@
           -0.281225213875246,
           0.08600583380322457,
           -0.24412997050723395,
-          0.0009792412032197184,
+          9.792412032197184E-4,
           0.1629870412209421,
           -0.09374887075450478,
           -0.2814788880215803,
@@ -94090,7 +94090,7 @@
           0.07659629004380508,
           -0.08042689682492124,
           0.10719027754186902,
-          0.0007227773042644738,
+          7.227773042644738E-4,
           0.005565534815528631,
           -0.05127494183260945,
           0.319555046340789,
@@ -95375,7 +95375,7 @@
           -0.009898436706018322,
           0.022672674294824696,
           0.0326182210255013,
-          -0.0009101040232390514,
+          -9.101040232390514E-4,
           0.07099703738763422,
           -0.17421216813403007,
           -0.13260363688110371,
@@ -95503,7 +95503,7 @@
           -0.00755136249143341,
           -0.13936923711482024,
           -0.06104191318483706,
-          0.0007855819995384976,
+          7.855819995384976E-4,
           -0.1378759729312537,
           -0.17884463939107248,
           -0.17884463939107248,
@@ -95725,9 +95725,9 @@
           0.26904931469086024,
           -0.292191368617149,
           -0.18847118087861214,
-          -0.0003384952833592169,
+          -3.384952833592169E-4,
           -0.318588828674543,
-          -0.0003384952833592169,
+          -3.384952833592169E-4,
           -0.24944263811335476,
           0.08418709908193067,
           -0.25991511311920745,
@@ -97031,7 +97031,7 @@
           -0.13735066044777627,
           0.006338327934695815,
           0.002138437867812922,
-          -0.0005369834417246594,
+          -5.369834417246594E-4,
           -0.2991802226448066,
           -0.08439723545309312,
           0.20766386412467092,
@@ -97788,7 +97788,7 @@
           0.0010707179849580584,
           -0.08668392036549766,
           -0.07151490252740486,
-          -0.0006594456110454025,
+          -6.594456110454025E-4,
           -0.27730304283213736,
           0.037378012000061904,
           0.004987567522597942,
@@ -97851,7 +97851,7 @@
           -0.18539202113937187,
           -0.1759319066730189,
           -0.2003434953704018,
-          -0.0003208754892225288,
+          -3.208754892225288E-4,
           -0.033698553173150035,
           -0.13360333769728017,
           0.11293987440036689,
@@ -98096,7 +98096,7 @@
           0.03946277405738965,
           -0.010212293104130913,
           -0.04866200635584083,
-          0.0006519924353971147,
+          6.519924353971147E-4,
           0.02797513854004211,
           -0.05717784653334311,
           -0.0849372219053117,
@@ -98888,7 +98888,7 @@
           -0.28689657891383724,
           0.11594769060155177,
           -0.1565403661296932,
-          -4.410993316040189e-05,
+          -4.410993316040189E-5,
           -0.11419200284539335,
           -0.038213569110905496,
           0.04476770458379645,
@@ -99647,7 +99647,7 @@
           -0.09743631076331699,
           0.0636242055138888,
           -0.05582493780449524,
-          0.0005201656753274497,
+          5.201656753274497E-4,
           0.16972845681129795,
           0.08912762031870308,
           0.03724702159892233,
@@ -100545,10 +100545,10 @@
           0.06643375883595033,
           0.17218324254792974,
           0.07712792491732898,
-          -0.0008418531726937448,
+          -8.418531726937448E-4,
           0.05640974056726845,
           0.1934124656265434,
-          4.738973827226635e-05,
+          4.738973827226635E-5,
           0.2418736531079268,
           -0.27306585646582304,
           -0.11182816497493026,
@@ -100575,7 +100575,7 @@
           -0.10363710517627989,
           0.011104091583403086,
           -0.047054624558466124,
-          -2.6844456142467347e-05,
+          -2.6844456142467347E-5,
           -0.21345571496865268,
           -0.03125101152922899,
           -0.06341890430317969,
@@ -100586,7 +100586,7 @@
           -0.08608736108708322,
           -0.07495716999188684,
           -0.30842253838800193,
-          0.0008506777690987215,
+          8.506777690987215E-4,
           -0.1402769303152088,
           -0.11326450007207857,
           -0.2632339717092588,
@@ -100608,7 +100608,7 @@
           0.07772417978567642,
           0.08332930506176445,
           -0.17390632948664486,
-          0.0006537493784091481,
+          6.537493784091481E-4,
           -0.13110157698521602,
           -0.11490560488989487,
           0.32113766873737826,
@@ -100736,11 +100736,11 @@
           0.0678372371508907,
           0.3341241174309907,
           0.16286678653727926,
-          -0.0005660722179360936,
+          -5.660722179360936E-4,
           0.0978156756548515,
           -0.026112619460504298,
           -0.20640754413884424,
-          -6.0002154986180545e-05,
+          -6.0002154986180545E-5,
           0.19816075265323715,
           -0.14505738700480333,
           -0.1360695027055463,
@@ -100822,7 +100822,7 @@
           -0.07727449100721043,
           -0.10536068286302734,
           -0.1367948551688829,
-          0.0003459617331264247,
+          3.459617331264247E-4,
           -0.19162616580542768,
           -0.05343210728056186,
           -0.003458465284285709,
@@ -100944,7 +100944,7 @@
           0.09176124268908434,
           -0.02442786378315997,
           -0.10402776371387847,
-          0.0008752233653289651,
+          8.752233653289651E-4,
           0.0032458643094135315,
           0.2357289667040755,
           0.07202740446640674,
@@ -100991,7 +100991,7 @@
           -0.05633587907627256,
           0.08189459379304004,
           -0.05549678273091146,
-          0.0005909888148025438,
+          5.909888148025438E-4,
           -0.08162670956132535,
           -0.05583459903521587,
           -0.16150686877240017,
@@ -101209,7 +101209,7 @@
           -0.002181064740381107,
           0.27822229717114016,
           0.10911434922441395,
-          -0.00035129085552731715,
+          -3.5129085552731715E-4,
           0.09446874120873094,
           0.38355071351226094,
           0.008204129688867166,
@@ -102428,7 +102428,7 @@
           -0.04360765529554255,
           0.026250370682897553,
           -0.05844563550119086,
-          0.0006900820383692252,
+          6.900820383692252E-4,
           -0.06403622196503611,
           0.0018272850408802346,
           -0.06443916795719312,
@@ -102547,7 +102547,7 @@
           0.01878066609105271,
           -0.14113629976032768,
           -0.024461314727486305,
-          -0.00035285752655607634,
+          -3.5285752655607634E-4,
           0.07645356185117066,
           0.06706436910730243,
           0.10656888321382645,
@@ -102616,7 +102616,7 @@
           -0.27142988425898795,
           -0.1133062961370911,
           -0.14151341875751602,
-          0.0003176414170696397,
+          3.176414170696397E-4,
           -0.022122327955161336,
           -0.06369106966586538,
           -0.005092047296126514,
@@ -103201,7 +103201,7 @@
           -0.06726567445327529,
           0.19705483716012467,
           0.0749869486652979,
-          -0.00037191030113176496,
+          -3.7191030113176496E-4,
           -0.18607600252696319,
           -0.02850964089854807,
           0.09706334650154438,
